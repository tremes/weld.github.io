---
layout: news
title: Weld Tip 4 - Testing Weld apps
author: Tomas Remes, Matej Novotny
priority: 1
change_frequency: weekly
excerpt: Taking a dive into CDI/Weld application testing.
desc: Weld Tip 4 - Testing Weld apps
tags: [tips]
---
:linkattrs:
:toc: macro
:toc-title: Contents
:icons: font

toc::[]

In this follow-up article of our Weld Tips series we are going to focus on integration testing of CDI/Weld applications.
To set things straight - by integration testing we mean testing in some kind of container and hence in certain environment (SE, servlet, full EE server).
And whatever the environment, we always make use of of link:http://arquillian.org/[Arquillian] integration testing framework. 

== Arquillian as the chosen framework for testing
While Arquillian may look complex at first, it is certainly worth it. Here are some of the advantages it gives you:

* Allows usage of `@Inject` directly in test classes
* Works well with ShrinkWrap making archive creation and deployment a breeze
** link:http://arquillian.org/guides/shrinkwrap_introduction/[ShrinkWrap] can create any type of deployment archive (WAR, JAR, even infamous EAR) with exactly the capabilities you wish it to have
** You can use dedicated `beans.xml` or `@Alternatives` for given test case
* Allows to write one test and run it on any container
** Arquillian only need correct adapter; therefore combined with Maven profiles, this gives you some nice fire power for matrix testing
* Allows for very complex testing scenarios
** For instance you can create several deployments which you then manually (if you so wish) deploy/undeploy
** This makes it viable even for cluster testing (session replications for instance)
* Can start the application server itself or can just connect to running one

Should you need an inspiration, you needn't look no further than our link:https://github.com/weld/core/tree/master/tests-arquillian/src/test/java/org/jboss/weld/tests[testsuite].
To further support the though of Arquillian usefulness for CDI/Weld testing, we may point out that even link:https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests[CDI TCK tests] use it.


Now, let's take a look at different environments and then round it up with link:https://github.com/arquillian/arquillian-container-weld[Arquillian Weld Embedded container], which can be used in each every environment.

== Java EE application server
When you want to test your application in Java EE application server you basically need to create your test deployment archive, deploy it, execute the test and undeploy the test deployment archive.
As stated above, link:http://arquillian.org/modules/shrinkwrap-shrinkwrap/[ShrinkWrap] covers the archive creation (typically WAR or EAR).
When it comes to deployment/undeployment, Arquillian controls that, unless you take the reins and control it yourself - just keep an eye for dangling deployments.
You also get to chose between using so called managed container, where Arquillian starts and stops the desired container for you, and remote container where Arquillian tries to connect to already running container.
Since we are talking Java EE application server, you can use CDI out of the box.
Just pay attention to link:https://docs.jboss.org/author/display/ARQ/Test+run+modes[test mode] you are using.
You can check available Arquillian container adapters link:http://arquillian.org/modules/[here].

For example to use Arquillian WildFly Managed container you need to define following dependency:
[ source, xml ]
----
               <dependency>
                   <groupId>org.wildfly.arquillian</groupId>
                   <artifactId>wildfly-arquillian-container-managed</artifactId>
                   <version>1.1.0.Final</version>
                   <scope>test</scope>
               </dependency>
----

== Servlet environment
In basic Servlet environment you need to deploy all the dependencies of Weld Servlet integration (as CDI API, Interceptors API, etc.) to your Servlet container and thus embedded container option could be sufficient.
As you can link:http://arquillian.org/modules/[see] Arquillian offers embedded container adapters for all well known Servlet containers as Tomcat, Jetty and Undertow.

For example to use Arquillian Embedded Tomcat container you need to define following dependency:
[ source, xml ]
----
               <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-tomcat-embedded-8</artifactId>
                    <version>1.0.0.CR8</version>
                    <scope>test</scope>
                </dependency>
----

== Java SE environment & Arquillian Weld Embedded container
In SE environment we can shake off all the complexity of other EE tehcnologies (EJB. JTA, JPA, ...) but we also have to realize that we are down to one "flat" JAR file.
For such a situation, Arquillian Weld Embedded container is a perfect fit, so let's take a closer look
 
=== Arquillian Weld Embedded container
First of all - this test container is suitable in situations when you know you don't need to work with full Java EE application server and you are OK with dummy mock EJB, JTA, JPA etc. services.
As stated in the beginning of this article, you can use it for any environment but you have to keep it mind, that other technologies/services will be mocked only.
By default, this container operates in SE mode, as you don't need to mock anything there, but you can use a system property (`Denvironment=EE`) or a programmatic approach in order to make it work in other environments.
For full list of supported environments, see link:https://github.com/weld/api/blob/master/weld-spi/src/main/java/org/jboss/weld/bootstrap/api/Environments.java[`Environments.java`].

We recommend you to take a glance at link:https://github.com/arquillian/arquillian-container-weld/blob/master/README.adoc[README] file - especially those few lines about flat deployment structure (this means this container is not very suitable for testing EAR deployments) and configuration property for setting testing environment.

The maven dependency for this container could look like this:
[ source, xml ]
----
               <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-weld-embedded</artifactId>
                    <version>2.0.0.Beta4</version>
                    <scope>test</scope>
                </dependency>
----

